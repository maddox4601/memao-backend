name: Deploy Flask Backend (Master)

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      FLASK_APP: "app.py"
      DB_RETRY_TIMEOUT: 30  # 数据库等待超时(秒)

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: master
        fetch-depth: 0

    - name: Validate Migrations
      run: |
        # 检查未提交的迁移文件
        if [ -n "$(git status -s alembic/versions/)" ]; then
          echo "::error::存在未提交的迁移文件:"
          git status alembic/versions/
          exit 1
        fi

        # 检查迁移文件冲突
        if [ $(flask db heads | wc -l) -gt 1 ]; then
          echo "::error::存在多个迁移HEAD版本:"
          flask db heads
          exit 1
        fi

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Deploy via SSH
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        set -eo pipefail
        echo "▶️ [Master] 生产环境部署启动..."
        
        # 环境配置
        export DEPLOY_DIR="/root/memao-backend"
        export TIMESTAMP=$(date +%Y%m%d%H%M%S)
        export LOG_FILE="/tmp/deploy_${TIMESTAMP}.log"
        export DB_BACKUP_FILE="/backups/db_pre_deploy_${TIMESTAMP}.sql"
        
        # 日志记录
        exec > >(tee -a "$LOG_FILE") 2>&1

        # 0. 数据库备份
        echo "💾 数据库备份..."
        docker compose exec -T db \
          mysqldump -u${{ secrets.DB_USER }} -p"${{ secrets.DB_PASSWORD }}" ${{ secrets.DB_NAME }} > "$DB_BACKUP_FILE" || {
          echo "::warning::数据库备份失败（继续部署）"
        }

        # 1. 代码同步
        cd "$DEPLOY_DIR" || exit 1
        echo "🔄 同步代码..."
        git fetch --tags origin master
        git checkout -B master origin/master
        git reset --hard origin/master

        # 2. 检测迁移变更
        MIGRATION_CHANGED=$(git diff --name-only HEAD@{1} HEAD | grep -q "alembic/versions/" && echo true || echo false)
        echo "🔍 迁移文件变更: $MIGRATION_CHANGED"

        # 3. 服务重建
        echo "🐳 重建Docker服务..."
        docker compose down --timeout 30
        docker compose up -d --build

        # 4. 容器健康检查（带重试）
        echo "🩺 等待服务就绪..."
        for i in $(seq 1 6); do
          if docker compose ps | grep -q "(healthy)"; then
            break
          fi
          [ $i -eq 6 ] && {
            echo "::error::容器启动超时"
            docker compose logs
            exit 1
          }
          sleep 5
          echo "尝试 $i/6..."
        done

        # 5. 数据库迁移（条件执行）
        if $MIGRATION_CHANGED; then
          echo "🗃️ 执行数据库迁移..."
          docker compose exec -T backend bash -c "
            set -eo pipefail
            export PYTHONPATH=/app
            
            # 等待数据库就绪
            for i in \$(seq 1 $DB_RETRY_TIMEOUT); do
              if flask db current &>/dev/null; then
                break
              fi
              [ \$i -eq $DB_RETRY_TIMEOUT ] && {
                echo '::error::数据库连接超时'
                exit 1
              }
              sleep 1
            done

            echo '=== 迁移前版本 ==='
            flask db current || true
            
            echo '=== 执行迁移 ==='
            if ! flask db upgrade 2>&1; then
              echo '::error::迁移执行失败，尝试回滚...'
              flask db downgrade -1
              exit 1
            fi
            
            echo '=== 迁移后版本 ==='
            flask db current
          " | tee "/tmp/db_migration_${TIMESTAMP}.log"
        else
          echo "⏩ 跳过数据库迁移（无变更）"
        fi

        # 6. 最终验证
        echo "✅ 验证部署..."
        if ! docker compose exec -T backend curl -s http://localhost/health | grep -q "healthy"; then
          echo "::error::健康检查失败"
          docker compose logs --tail=50
          exit 1
        fi

        echo "🎉 部署成功完成"
        echo "日志文件: $LOG_FILE"
        echo "数据库备份: $DB_BACKUP_FILE"
        EOF

    - name: Post-Deploy Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 生产环境部署成功"
          # 可添加成功通知（如Slack/邮件）
        else
          echo "❌ 部署失败！需要人工干预"
          # 可添加告警通知
        fi