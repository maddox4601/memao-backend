name: Deploy Flask Backend (Master)

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      FLASK_APP: "app.py"
      DB_WAIT_TIMEOUT: 120  # Êï∞ÊçÆÂ∫ìÁ≠âÂæÖË∂ÖÊó∂(Áßí)
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: master
        fetch-depth: 0

    - name: Validate Migrations
      run: |
        if [ -n "$(git status -s alembic/versions/)" ]; then
          echo "::error::Uncommitted migration files detected:"
          git status alembic/versions/
          exit 1
        fi

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Deploy via SSH
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        set -eo pipefail
        echo "üöÄ Starting production deployment..."

        # Environment setup
        export DEPLOY_DIR="/root/memao-backend"
        export TIMESTAMP=$(date +%Y%m%d%H%M%S)
        export LOG_FILE="/tmp/deploy_${TIMESTAMP}.log"

        # Logging setup
        exec > >(tee -a "$LOG_FILE") 2>&1

        # 1. Code deployment
        cd "$DEPLOY_DIR" || exit 1
        echo "üîÅ Syncing code..."
        git fetch --tags origin master
        git checkout -B master origin/master
        git reset --hard origin/master
        
        # ËøΩÂä† Google OAuth secrets Âà∞ .env.pro
        echo "üîë Adding Google OAuth secrets..."
        echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> /root/memao-backend/.env.pro
        echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" >> /root/memao-backend/.env.pro


        # 2. Service restart
        echo "üê≥ Rebuilding containers..."
        docker compose --env-file /root/memao-backend/.env.pro down --timeout 30
        docker compose --env-file /root/memao-backend/.env.pro up -d --build

        # 3. Wait for MySQL FULLY ready using healthcheck
        echo "‚è≥ Waiting for MySQL to be healthy..."
        DB_READY=false
        for i in $(seq 1 $DB_WAIT_TIMEOUT); do
          STATUS=$(docker inspect --format='{{.State.Health.Status}}' memao-backend-mysql-1 || echo "starting")
          if [ "$STATUS" = "healthy" ]; then
            DB_READY=true
            break
          fi
          sleep 2
          echo "Waiting...($i/$DB_WAIT_TIMEOUT) MySQL status: $STATUS"
        done

        if ! $DB_READY; then
          echo "::error::MySQL startup timed out"
          docker compose logs mysql
          exit 1
        fi

        # 4. Database migration with health check
        echo "üõ†Ô∏è Executing database migration..."
        docker compose --env-file /root/memao-backend/.env.pro exec -T backend bash -c "
          set -eo pipefail
          export PYTHONPATH=/app
        
          DB_HOST=mysql
          DB_PORT=3306
          DB_USER=memao_prod_user
          DB_PASSWORD='Maddox1988@'
        
          # Wait for DB connectivity via Flask
          for i in \$(seq 1 60); do
            if flask db current &>/dev/null; then
              echo 'DB connected ‚úÖ'
              break
            fi
            [ \$i -eq 60 ] && {
              echo '::error::Failed to connect to database via flask'
              exit 1
            }
            sleep 2
          done
        
          echo '=== Current DB Revision ==='
          flask db current || true
        
          echo '=== Executing Migration ==='
          if ! flask db upgrade 2>&1; then
            echo '::error::Migration failed, attempting rollback...'
            flask db downgrade -1
            exit 1
          fi
        
          echo '=== Migration Complete ==='
          flask db current
        " | tee "/tmp/migration_${TIMESTAMP}.log"


        # 5. Final verification
        echo "‚úÖ Verifying deployment..."
        if ! docker compose exec -T backend curl -sf http://localhost/health; then
          echo "::error::Health check failed"
          docker compose logs --tail=50
          exit 1
        fi

        echo "üéâ Deployment successful!"
        echo "Logs: $LOG_FILE"
        EOF

    - name: Notify Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Production deployment completed"
        else
          echo "‚ùå Deployment failed!"
        fi