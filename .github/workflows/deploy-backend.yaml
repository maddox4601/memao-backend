name: Deploy Flask Backend (Master)

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 25
    env:
      FLASK_APP: "app.py"
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: master
        fetch-depth: 0

    - name: Validate Migrations
      run: |
        if [ -n "$(git status -s alembic/versions/)" ]; then
          echo "::error::Uncommitted migration files detected:"
          git status alembic/versions/
          exit 1
        fi

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Deploy via SSH
      env:
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      run: |
        # 检查本地 secret 是否可用
        if [ -z "$GOOGLE_CLIENT_ID" ]; then
          echo "::error::GOOGLE_CLIENT_ID is empty"
        else
          echo "✅ GOOGLE_CLIENT_ID is set (masked)"
        fi
        if [ -z "$GOOGLE_CLIENT_SECRET" ]; then
          echo "::error::GOOGLE_CLIENT_SECRET is empty"
        else
          echo "✅ GOOGLE_CLIENT_SECRET is set (masked)"
        fi

        # 通过 ssh 传递环境变量到远程 shell
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
          "export GOOGLE_CLIENT_ID='$GOOGLE_CLIENT_ID'; \
           export GOOGLE_CLIENT_SECRET='$GOOGLE_CLIENT_SECRET'; \
           DEPLOY_DIR='/root/memao-backend'; \
           TIMESTAMP=\$(date +%Y%m%d%H%M%S); \
           LOG_FILE='/tmp/deploy_\${TIMESTAMP}.log'; \
           DB_WAIT_TIMEOUT=120; \
           exec > >(tee -a \"\$LOG_FILE\") 2>&1; \
           cd \$DEPLOY_DIR || exit 1; \
        
           # 1️⃣ 拉取最新代码
           if [ ! -d .git ]; then
             git init; \
             git remote add origin https://github.com/your/repo.git; \
           fi; \
           git fetch --tags origin master; \
           git reset --hard origin/master; \
           git clean -fd; \

           # 2️⃣ 更新 .env.pro
           sed -i '/GOOGLE_CLIENT_/d' .env.pro; \
           echo \"GOOGLE_CLIENT_ID=\$GOOGLE_CLIENT_ID\" >> .env.pro; \
           echo \"GOOGLE_CLIENT_SECRET=\$GOOGLE_CLIENT_SECRET\" >> .env.pro; \
        
           # 3️⃣ 重建 Docker
           docker compose --env-file .env.pro down --timeout 30; \
           docker compose --env-file .env.pro up -d --build; \
        
           # 4️⃣ 等待 MySQL 健康
           DB_READY=false; \
           for i in \$(seq 1 120); do \
             if docker compose ps mysql | grep -q 'healthy'; then DB_READY=true; break; fi; sleep 2; \
           done; \
           if ! \$DB_READY; then echo '::error::MySQL startup timed out'; docker compose logs mysql; exit 1; fi; \
           
           # 5️⃣ 数据库迁移
           docker compose --env-file .env.pro exec -T backend bash -c \"set -eo pipefail; export PYTHONPATH=/app; \
             for i in \$(seq 1 30); do \
               if flask db current &>/dev/null; then break; fi; sleep 2; \
             done; \
             flask db upgrade\"; \
           
           echo '🔍 Testing database connection...'
          docker compose --env-file .env.pro exec -T backend bash -c "set -eo pipefail; python - <<'PYCODE'
          import os
          import sqlalchemy
          
          db_url = os.getenv('DATABASE_URL') or os.getenv('SQLALCHEMY_DATABASE_URI') or os.getenv('DB_URI')
          if not db_url:
              print('::error::DATABASE_URL not set in environment')
              exit(1)
          
          try:
              engine = sqlalchemy.create_engine(db_url)
              with engine.connect() as conn:
                  result = conn.execute(sqlalchemy.text('SELECT 1'))
                  print('✅ Database connection OK:', result.scalar())
          except Exception as e:
              print('::error::Database connection failed:', e)
              exit(1)
          PYCODE"

           # 6️⃣ 健康检查
           for i in {1..10}; do \
             if docker compose exec -T backend curl -sf http://localhost:5000/health > /dev/null; then break; fi; \
             sleep 3; \
           done; \
           echo '🎉 Deployment successful! Logs: \$LOG_FILE'; \
           docker system prune -f --filter 'until=24h'"

    - name: Notify Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Production deployment completed"
        else
          echo "❌ Deployment failed!"
        fi
