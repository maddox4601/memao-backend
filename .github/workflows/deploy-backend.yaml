name: Deploy Flask Backend (Master)

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 25
    env:
      FLASK_APP: "app.py"
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: master
        fetch-depth: 0

    - name: Validate Migrations
      run: |
        if [ -n "$(git status -s alembic/versions/)" ]; then
          echo "::error::Uncommitted migration files detected:"
          git status alembic/versions/
          exit 1
        fi

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Deploy via SSH
      env:
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      run: |
        # Ê£ÄÊü•Êú¨Âú∞ secret ÊòØÂê¶ÂèØÁî®
        if [ -z "$GOOGLE_CLIENT_ID" ]; then
          echo "::error::GOOGLE_CLIENT_ID is empty"
        else
          echo "‚úÖ GOOGLE_CLIENT_ID is set (masked)"
        fi
        if [ -z "$GOOGLE_CLIENT_SECRET" ]; then
          echo "::error::GOOGLE_CLIENT_SECRET is empty"
        else
          echo "‚úÖ GOOGLE_CLIENT_SECRET is set (masked)"
        fi
        

        # ÈÄöËøá ssh ‰º†ÈÄíÁéØÂ¢ÉÂèòÈáèÂà∞ËøúÁ®ã shell
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
        "GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}' \
         GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}' \
         bash -s" < deploy.sh
        
        # 6Ô∏è‚É£ ÂÅ•Â∫∑Ê£ÄÊü•
           for i in {1..10}; do \
             if docker compose exec -T backend curl -sf http://localhost:5000/health > /dev/null; then break; fi; \
             sleep 3; \
           done; \
           echo 'üéâ Deployment successful! Logs: \$LOG_FILE'; \
           docker system prune -f --filter 'until=24h'"


    - name: Notify Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Production deployment completed"
        else
          echo "‚ùå Deployment failed!"
        fi