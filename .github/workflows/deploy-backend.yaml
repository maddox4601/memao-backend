name: Deploy Flask Backend (Master)

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      FLASK_APP: "app.py"

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: master
        fetch-depth: 0

    - name: Validate Migrations
      run: |
        if [ -n "$(git status -s alembic/versions/)" ]; then
          echo "::error::Uncommitted migration files detected:"
          git status alembic/versions/
          exit 1
        fi

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Deploy via SSH
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        set -eo pipefail
        echo "üöÄ Starting production deployment..."

        # Environment setup
        export DEPLOY_DIR="/root/memao-backend"
        export TIMESTAMP=$(date +%Y%m%d%H%M%S)
        export LOG_FILE="/tmp/deploy_${TIMESTAMP}.log"
        export DB_WAIT_TIMEOUT=120  # ÁßªÂà∞ SSH ‰ºöËØùÂÜÖÈÉ®

        # Logging setup
        exec > >(tee -a "$LOG_FILE") 2>&1

        # 1. Code deployment
        cd "$DEPLOY_DIR" || exit 1
        echo "üîÅ Syncing code..."
        git fetch --tags origin master
        git checkout -B master origin/master
        git reset --hard origin/master
        
        # ÊîπËøõÔºö‰ΩøÁî®‰∏¥Êó∂Êñá‰ª∂ÈÅøÂÖçÈáçÂ§çËøΩÂä†
        echo "üîë Updating environment file..."
        ENV_FILE="/root/memao-backend/.env.pro"
        # ÁßªÈô§ÂèØËÉΩÂ∑≤Â≠òÂú®ÁöÑ Google OAuth ÈÖçÁΩÆ
        grep -v "GOOGLE_CLIENT_" "$ENV_FILE" > "$ENV_FILE.tmp" || true
        # Ê∑ªÂä†Êñ∞ÁöÑÈÖçÁΩÆ
        echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> "$ENV_FILE.tmp"
        echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> "$ENV_FILE.tmp"
        mv "$ENV_FILE.tmp" "$ENV_FILE"

        # 2. Service restart
        echo "üê≥ Rebuilding containers..."
        docker compose --env-file "$ENV_FILE" down --timeout 30
        docker compose --env-file "$ENV_FILE" up -d --build

        # 3. Wait for MySQL FULLY ready using healthcheck
        echo "‚è≥ Waiting for MySQL to be healthy..."
        DB_READY=false
        for i in $(seq 1 $DB_WAIT_TIMEOUT); do
          if docker compose ps mysql | grep -q "healthy"; then
            DB_READY=true
            break
          fi
          sleep 2
          echo "Waiting...($i/$DB_WAIT_TIMEOUT)"
        done

        if ! $DB_READY; then
          echo "::error::MySQL startup timed out"
          docker compose logs mysql
          exit 1
        fi

        # 4. Database migration with improved error handling
        echo "üõ†Ô∏è Executing database migration..."
        docker compose --env-file "$ENV_FILE" exec -T backend bash -c "
          set -eo pipefail
          export PYTHONPATH=/app
        
          # Wait for DB connectivity via Flask with timeout
          echo 'Checking database connection...'
          for i in \$(seq 1 30); do
            if flask db current &>/dev/null; then
              echo 'DB connected ‚úÖ'
              break
            fi
            if [ \$i -eq 30 ]; then
              echo '::error::Failed to connect to database via flask'
              exit 1
            fi
            sleep 2
          done
        
          echo '=== Current DB Revision ==='
          flask db current || echo 'No current revision (fresh database?)'
        
          echo '=== Executing Migration ==='
          if flask db upgrade 2>&1; then
            echo '=== Migration Complete ==='
            flask db current
          else
            echo '::error::Migration failed'
            echo 'Last revision:'
            flask db current || true
            exit 1
          fi
        " | tee "/tmp/migration_${TIMESTAMP}.log"

        # 5. Final verification with retry
        echo "‚úÖ Verifying deployment..."
        for i in {1..10}; do
          if docker compose exec -T backend curl -sf http://localhost:5000/health > /dev/null; then
            echo "Health check passed ‚úÖ"
            break
          fi
          if [ $i -eq 10 ]; then
            echo "::error::Health check failed after 10 attempts"
            docker compose logs --tail=50 backend
            exit 1
          fi
          sleep 3
        done

        echo "üéâ Deployment successful!"
        echo "Logs: $LOG_FILE"
        
        # 6. Cleanup old containers and images
        echo "üßπ Cleaning up..."
        docker system prune -f --filter "until=24h"
        EOF

    - name: Notify Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Production deployment completed"
        else
          echo "‚ùå Deployment failed!"
        fi