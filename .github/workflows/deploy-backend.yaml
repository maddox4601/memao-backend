name: Deploy Flask Backend (Master)

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: master
        fetch-depth: 0  # 获取完整提交历史

    - name: Verify Migrations
      run: |
        # 检查是否有未提交的迁移文件
        if git status -s alembic/versions/ | grep -q "^ M"; then
          echo "::error::存在未提交的数据库迁移文件！"
          git status alembic/versions/
          exit 1
        fi

        # 检查本次提交是否包含迁移文件
        if [ "$(git diff --name-only origin/master...HEAD | grep -c 'alembic/versions/')" -eq 0 ]; then
          echo "::notice::本次提交未包含数据库迁移文件"
        fi

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Verify SSH Connection
      run: |
        ssh -T -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} exit
        if [ $? -ne 0 ]; then
          echo "::error::SSH连接测试失败"
          exit 1
        fi

    - name: Deploy via SSH
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        set -e
        echo "▶️ [Master] 开始生产环境部署..."
        
        # 环境变量配置
        export DEPLOY_DIR="/root/memao-backend"
        export LOG_FILE="/tmp/deploy_$(date +%Y%m%d%H%M%S).log"
        
        # 记录详细日志
        exec > >(tee -a "$LOG_FILE") 2>&1

        # 验证部署目录
        if [ ! -d "$DEPLOY_DIR" ]; then
          echo "::error::部署目录不存在: $DEPLOY_DIR"
          exit 1
        fi

        # 进入项目目录
        cd "$DEPLOY_DIR" || exit 1
        
        # 拉取最新代码
        echo "🔄 同步master分支..."
        git fetch origin master
        git checkout master
        git reset --hard origin/master || {
          echo "::error::Git同步失败"
          exit 1
        }

        # 检查文件变化
        echo "📄 文件变更检查:"
        git diff --name-only HEAD@{1} HEAD

        # 重建容器
        echo "🐳 重建Docker服务..."
        docker compose down --timeout 30 || true
        
        if ! docker compose up -d --build; then
          echo "::error::Docker部署失败"
          docker compose logs --tail=50
          exit 1
        fi
        
        # 等待容器启动
        echo "⏳ 等待容器启动(10秒)..."
        sleep 10

        # 数据库迁移（新版优化流程）
        echo "🗃️ 执行数据库迁移..."
        DB_MIGRATION_LOG="/tmp/db_migration_$(date +%s).log"
        docker compose exec -T backend bash -c "
          set -e
          export FLASK_APP=app.py
          export PYTHONPATH=/app
          
          echo '=== 当前数据库版本 ==='
          flask db current || true
          
          echo '=== 标记当前版本 ==='
          flask db stamp head 2>&1
          
          echo '=== 执行迁移 ==='
          flask db upgrade 2>&1
          
          echo '=== 迁移后版本 ==='
          flask db current
        " | tee "$DB_MIGRATION_LOG"
        
        # 检查迁移是否成功
        if grep -q "ERROR" "$DB_MIGRATION_LOG"; then
          echo "::error::数据库迁移失败"
          cat "$DB_MIGRATION_LOG"
          exit 1
        fi

        # 健康检查
        echo "🩺 服务健康检查..."
        sleep 15
        if ! docker ps --filter "name=memao-backend" --format "table {{.Names}}\t{{.Status}}" | grep "(healthy)"; then
          echo "::warning::容器未显示healthy状态"
          docker compose logs --tail=50
          # 非关键错误不终止流程
        fi

        echo "✅ [Master] 生产环境部署完成"
        echo "详细日志见: $LOG_FILE"
        EOF

    - name: Notify Success
      if: success()
      run: |
        echo "部署成功完成！"
        # 可添加通知逻辑（如Slack/邮件）